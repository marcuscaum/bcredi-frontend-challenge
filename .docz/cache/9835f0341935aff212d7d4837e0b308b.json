{
  "remainingRequest": "/home/ubuntu/bcredi-frontend-challenge/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/home/ubuntu/bcredi-frontend-challenge/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"/home/ubuntu/bcredi-frontend-challenge/node_modules/react-hot-loader/babel.js\"],\"cacheDirectory\":true,\"babelrc\":false}!/home/ubuntu/bcredi-frontend-challenge/src/components/SignUpForm/handlers.js",
  "dependencies": [
    {
      "path": "/home/ubuntu/bcredi-frontend-challenge/src/components/SignUpForm/handlers.js",
      "mtime": 1536391022809
    },
    {
      "path": "/home/ubuntu/bcredi-frontend-challenge/node_modules/cache-loader/dist/cjs.js",
      "mtime": 0
    },
    {
      "path": "/home/ubuntu/bcredi-frontend-challenge/node_modules/babel-loader/lib/index.js",
      "mtime": 499162500000
    }
  ],
  "contextDependencies": [],
  "result": [
    "(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport has from 'lodash.has';\nimport { toast } from 'react-toastify';\nvar _default = {\n  onChangeInputValue: function onChangeInputValue(_ref) {\n    var formValues = _ref.formValues,\n        validatedFields = _ref.validatedFields;\n    return function (evt) {\n      var inputValue = evt.target.type === 'checkbox' ? evt.target.checked : evt.target.value;\n      var availableInputs = evt.target.getAttribute('validate') || evt.target.type === 'checkbox';\n\n      if (!inputValue) {\n        if (availableInputs) {\n          Object.assign(validatedFields, _defineProperty({}, evt.target.name, true));\n        }\n\n        return Object.assign(formValues, _defineProperty({}, evt.target.name, null));\n      }\n\n      if (availableInputs) {\n        Object.assign(validatedFields, _defineProperty({}, evt.target.name, false));\n      }\n\n      return Object.assign(formValues, _defineProperty({}, evt.target.name, inputValue));\n    };\n  },\n  saveUser: function saveUser(_ref2) {\n    var formValues = _ref2.formValues,\n        validatedFields = _ref2.validatedFields,\n        validationErrorMessages = _ref2.validationErrorMessages;\n    return function (evt) {\n      evt.preventDefault();\n      var fieldKeys = [];\n      var emailRegex = \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\";\n\n      if (has(validatedFields, Object.keys(formValues))) {\n        Object.entries(validatedFields).forEach(function (_ref3) {\n          var _ref4 = _slicedToArray(_ref3, 1),\n              key = _ref4[0];\n\n          if (!has(formValues, key)) {\n            fieldKeys.push(key);\n          }\n        });\n\n        if (!formValues.email.match(emailRegex)) {\n          Object.assign(validatedFields, {\n            email: true\n          });\n          Object.assign(validationErrorMessages, {\n            email: 'Adicione um email válido'\n          });\n        }\n\n        if (fieldKeys.length) {\n          return fieldKeys.map(function (key) {\n            return Object.assign(validatedFields, _defineProperty({}, key, true));\n          });\n        }\n      }\n\n      return toast('Parabéns! Cadastro realizado com sucesso!', {\n        position: toast.POSITION.TOP_CENTER\n      });\n    };\n  }\n};\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_default, \"default\", \"/home/ubuntu/bcredi-frontend-challenge/src/components/SignUpForm/handlers.js\");\n  leaveModule(module);\n})();\n\n;",
    {
      "version": 3,
      "sources": [
        "/home/ubuntu/bcredi-frontend-challenge/src/components/SignUpForm/handlers.js"
      ],
      "names": [
        "has",
        "toast",
        "onChangeInputValue",
        "formValues",
        "validatedFields",
        "evt",
        "inputValue",
        "target",
        "type",
        "checked",
        "value",
        "availableInputs",
        "getAttribute",
        "Object",
        "assign",
        "name",
        "saveUser",
        "validationErrorMessages",
        "preventDefault",
        "fieldKeys",
        "emailRegex",
        "keys",
        "entries",
        "forEach",
        "key",
        "push",
        "email",
        "match",
        "length",
        "map",
        "position",
        "POSITION",
        "TOP_CENTER"
      ],
      "mappings": ";;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,SAASC,KAAT,QAAsB,gBAAtB;eAEe;AACbC,EAAAA,kBAAkB,EAAE;AAAA,QAAGC,UAAH,QAAGA,UAAH;AAAA,QAAeC,eAAf,QAAeA,eAAf;AAAA,WAAqC,UAAAC,GAAG,EAAI;AAC9D,UAAMC,UAAU,GACdD,GAAG,CAACE,MAAJ,CAAWC,IAAX,KAAoB,UAApB,GAAiCH,GAAG,CAACE,MAAJ,CAAWE,OAA5C,GAAsDJ,GAAG,CAACE,MAAJ,CAAWG,KADnE;AAGA,UAAMC,eAAe,GACnBN,GAAG,CAACE,MAAJ,CAAWK,YAAX,CAAwB,UAAxB,KAAuCP,GAAG,CAACE,MAAJ,CAAWC,IAAX,KAAoB,UAD7D;;AAGA,UAAI,CAACF,UAAL,EAAiB;AACf,YAAIK,eAAJ,EAAqB;AACnBE,UAAAA,MAAM,CAACC,MAAP,CAAcV,eAAd,sBACGC,GAAG,CAACE,MAAJ,CAAWQ,IADd,EACqB,IADrB;AAGD;;AACD,eAAOF,MAAM,CAACC,MAAP,CAAcX,UAAd,sBAA6BE,GAAG,CAACE,MAAJ,CAAWQ,IAAxC,EAA+C,IAA/C,EAAP;AACD;;AAED,UAAIJ,eAAJ,EAAqB;AACnBE,QAAAA,MAAM,CAACC,MAAP,CAAcV,eAAd,sBAAkCC,GAAG,CAACE,MAAJ,CAAWQ,IAA7C,EAAoD,KAApD;AACD;;AAED,aAAOF,MAAM,CAACC,MAAP,CAAcX,UAAd,sBACJE,GAAG,CAACE,MAAJ,CAAWQ,IADP,EACcT,UADd,EAAP;AAGD,KAvBmB;AAAA,GADP;AAyBbU,EAAAA,QAAQ,EAAE;AAAA,QACRb,UADQ,SACRA,UADQ;AAAA,QAERC,eAFQ,SAERA,eAFQ;AAAA,QAGRa,uBAHQ,SAGRA,uBAHQ;AAAA,WAIJ,UAAAZ,GAAG,EAAI;AACXA,MAAAA,GAAG,CAACa,cAAJ;AAEA,UAAMC,SAAS,GAAG,EAAlB;AACA,UAAMC,UAAU,GACd,qIADF;;AAGA,UAAIpB,GAAG,CAACI,eAAD,EAAkBS,MAAM,CAACQ,IAAP,CAAYlB,UAAZ,CAAlB,CAAP,EAAmD;AACjDU,QAAAA,MAAM,CAACS,OAAP,CAAelB,eAAf,EAAgCmB,OAAhC,CAAwC,iBAAW;AAAA;AAAA,cAATC,GAAS;;AACjD,cAAI,CAACxB,GAAG,CAACG,UAAD,EAAaqB,GAAb,CAAR,EAA2B;AACzBL,YAAAA,SAAS,CAACM,IAAV,CAAeD,GAAf;AACD;AACF,SAJD;;AAMA,YAAI,CAACrB,UAAU,CAACuB,KAAX,CAAiBC,KAAjB,CAAuBP,UAAvB,CAAL,EAAyC;AACvCP,UAAAA,MAAM,CAACC,MAAP,CAAcV,eAAd,EAA+B;AAC7BsB,YAAAA,KAAK,EAAE;AADsB,WAA/B;AAGAb,UAAAA,MAAM,CAACC,MAAP,CAAcG,uBAAd,EAAuC;AACrCS,YAAAA,KAAK,EAAE;AAD8B,WAAvC;AAGD;;AAED,YAAIP,SAAS,CAACS,MAAd,EAAsB;AACpB,iBAAOT,SAAS,CAACU,GAAV,CAAc,UAAAL,GAAG;AAAA,mBACtBX,MAAM,CAACC,MAAP,CAAcV,eAAd,sBACGoB,GADH,EACS,IADT,EADsB;AAAA,WAAjB,CAAP;AAKD;AACF;;AAED,aAAOvB,KAAK,CAAC,2CAAD,EAA8C;AACxD6B,QAAAA,QAAQ,EAAE7B,KAAK,CAAC8B,QAAN,CAAeC;AAD+B,OAA9C,CAAZ;AAGD,KAvCS;AAAA;AAzBG,C;AAAf",
      "sourcesContent": [
        "import has from 'lodash.has';\nimport { toast } from 'react-toastify';\n\nexport default {\n  onChangeInputValue: ({ formValues, validatedFields }) => evt => {\n    const inputValue =\n      evt.target.type === 'checkbox' ? evt.target.checked : evt.target.value;\n\n    const availableInputs =\n      evt.target.getAttribute('validate') || evt.target.type === 'checkbox';\n\n    if (!inputValue) {\n      if (availableInputs) {\n        Object.assign(validatedFields, {\n          [evt.target.name]: true,\n        });\n      }\n      return Object.assign(formValues, { [evt.target.name]: null });\n    }\n\n    if (availableInputs) {\n      Object.assign(validatedFields, { [evt.target.name]: false });\n    }\n\n    return Object.assign(formValues, {\n      [evt.target.name]: inputValue,\n    });\n  },\n  saveUser: ({\n    formValues,\n    validatedFields,\n    validationErrorMessages,\n  }) => evt => {\n    evt.preventDefault();\n\n    const fieldKeys = [];\n    const emailRegex =\n      \"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$\";\n\n    if (has(validatedFields, Object.keys(formValues))) {\n      Object.entries(validatedFields).forEach(([key]) => {\n        if (!has(formValues, key)) {\n          fieldKeys.push(key);\n        }\n      });\n\n      if (!formValues.email.match(emailRegex)) {\n        Object.assign(validatedFields, {\n          email: true,\n        });\n        Object.assign(validationErrorMessages, {\n          email: 'Adicione um email válido',\n        });\n      }\n\n      if (fieldKeys.length) {\n        return fieldKeys.map(key =>\n          Object.assign(validatedFields, {\n            [key]: true,\n          })\n        );\n      }\n    }\n\n    return toast('Parabéns! Cadastro realizado com sucesso!', {\n      position: toast.POSITION.TOP_CENTER,\n    });\n  },\n};\n"
      ]
    }
  ]
}
